package jhu.edu.algos.lcs;

import jhu.edu.algos.utils.PerformanceMetrics;
import org.junit.jupiter.api.*;

import static org.junit.jupiter.api.Assertions.*;

/**
 * Comprehensive JUnit 5 test class for the LCSResult data structure.
 * Verifies correctness of input storage, LCS values, metrics tracking,
 * and formatted output representation.
 */
@TestInstance(TestInstance.Lifecycle.PER_CLASS)
public class LCSResultTest {

    // The test LCS result object to be initialized before each test
    private LCSResult result;

    // The performance metrics instance to attach to the result
    private PerformanceMetrics metrics;

    /**
     * Initializes a mock LCSResult object with known values
     * for use in all test cases.
     */
    @BeforeEach
    void setup() {
        // Mock input strings
        String s1 = "ACGT";
        String s2 = "AGT";

        // Expected LCS result from s1 and s2
        String lcs = "AGT";

        // Comparison label for testing metadata
        String label = "S1 vs S2";

        // Create and pre-populate metrics with mock values
        metrics = new PerformanceMetrics();
        metrics.addComparisons(42); // Simulate 42 comparisons
        metrics.startTimer();
        metrics.stopTimer(); // Stop immediately for zero-time mock

        // Construct the LCSResult with all values
        result = new LCSResult(label, s1, s2, lcs, metrics);
    }

    /**
     * Tests that the label and input strings are stored correctly.
     */
    @Test
    void testLabelAndInputs() {
        // Assert that the label is correctly stored and returned
        assertEquals("S1 vs S2", result.getComparisonLabel(), "Label should match input");

        // Assert that the first input string is stored and returned correctly
        assertEquals("ACGT", result.getFirstInput(), "First input string mismatch");

        // Assert that the second input string is stored and returned correctly
        assertEquals("AGT", result.getSecondInput(), "Second input string mismatch");
    }

    /**
     * Tests that the LCS string and its length are correctly returned.
     */
    @Test
    void testLCSStringAndLength() {
        // The LCS string should match what was passed in the constructor
        assertEquals("AGT", result.getLCS(), "LCS string should match expected value");

        // The computed LCS length should be accurate
        assertEquals(3, result.getLCSLength(), "LCS length should be equal to 3");
    }

    /**
     * Tests that the performance metrics are correctly attached and reported.
     */
    @Test
    void testPerformanceMetrics() {
        // The comparison count should reflect what was manually set
        assertEquals(42, result.getMetrics().getComparisonCount(), "Comparison count mismatch");

        // Elapsed time should be >= 0 (even if trivial in this case)
        assertTrue(result.getMetrics().getElapsedTimeMs() >= 0, "Elapsed time should be non-negative");
    }

    /**
     * Tests the string representation generated by toString().
     */
    @Test
    void testToStringOutputFormat() {
        // Capture the formatted result string
        String output = result.toString();

        // Ensure each expected element is present in the output
        assertTrue(output.contains("=== LCS Result: S1 vs S2 ==="), "Missing label in toString()");
        assertTrue(output.contains("Input 1: ACGT"), "Missing Input 1");
        assertTrue(output.contains("Input 2: AGT"), "Missing Input 2");
        assertTrue(output.contains("LCS    : AGT"), "Missing LCS string");
        assertTrue(output.contains("Length : 3"), "Missing LCS length");
        assertTrue(output.contains("Comparisons: 42"), "Missing comparison count");
    }
}
